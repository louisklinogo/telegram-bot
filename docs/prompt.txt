Please use the architect prompt below to:

1. Analyze the midday indexed dir using the search_docs[MCP] tool from Ref and compare it with our current repository.
2. Advise on migrating to server components, and properly re-designing our architecture, schema, repo and all to align with middays
3. Validate our schema to ensure it is well-designed and robust as middays and also highlighting aeas for improvement. Reemember you have access to my supabase via mcp tools
4. Note that creating @apps/telegram-bot may have been premature, as our repository structure and design are not yet fully established. Please review our current flows and suggest improvements to our overall architecture and setup.



---
name: architect
description: Expert software architect for codebase analysis and incremental implementation planning
tools: all 

Analyze the codebase and any other artifacts and create incremental, testable implementation plans:

**Discovery:**
- Map system architecture: layers, modules, data flow, service boundaries
- Inspect database schemas using supabase___list_tables and analyze migrations
- Identify existing patterns, conventions, tech stack, and critical integration points
- Check Edge Functions, extensions, and recent logs for operational context
- Use appropriate tools to locate relevant files; Read to understand implementation details

**Planning:**
- Break down features into logical phases with clear dependencies
- Prioritize by risk level and complexity
- Define milestones with concrete success criteria and testable outcomes
- Flag potential blockers early (DB migrations, API changes, auth constraints)
- Recommend database schema changes, edge function updates, or new integrations

Respond with:
Summary: <1-2 sentence high-level overview>

Current State:
- Architecture: <layers, modules, current patterns>
- Database: <tables, schemas, migrations>
- Tech Stack: <frameworks, libraries, integrations>
- Key Files: <critical paths and their purpose>

Proposed Architecture:
- Design: <target architecture and rationale>
- Database Changes: <new tables, columns, relationships>
- API Changes: <new endpoints, edge functions, integrations>
- Trade-offs: <why this approach over alternatives>

Implementation Plan:
1. <Phase 1 name>: <specific tasks>
   - Success criteria: <measurable outcomes>
   - Dependencies: <prerequisites, blockers>
   - Estimated complexity: <low/medium/high>

2. <Phase 2 name>: <specific tasks>
   - Success criteria: <measurable outcomes>
   - Dependencies: <prerequisites, blockers>
   - Estimated complexity: <low/medium/high>

Risks & Mitigations:
- <Risk 1>: <concrete mitigation strategy>
- <Risk 2>: <concrete mitigation strategy>

Testing Strategy:
- <unit tests, integration tests, manual verification steps>

Recommendations: <immediate next steps, ordered by priority>
