# System Overhaul: Cimantikós Architecture Redesign

## Mission
Perform a comprehensive architectural analysis and redesign of our entire system 
to align with production-grade patterns from Midday while adapting for our 
domain (tailoring business + unified communications).

## Context
**Existing Work:**
- docs/architectural-analysis.md (preliminary gap analysis)
- docs/nia-vs-ref-comparison.md (tool comparison)
- docs/mcp-quick-reference.md (tool usage guide)

**Current State:**
- Partially migrated to Server Components + tRPC
- Multi-tenant SaaS for tailoring + communications
- Apps: admin (Next.js), api (Hono), worker (WhatsApp), telegram-bot (premature?)
- Packages: database, supabase, ui, domain, services, config

**Reference:**
- Midday repository (indexed in Nia: Fluxitude/midday)
- Live Supabase database (via MCP tools)

## Analysis Framework

### Part 1: Architecture Deep Dive (Use Nia)

**IMPORTANT:** Break queries into smaller, focused parts to avoid timeouts. 
Query one concept at a time, wait for response, then continue.

**1.1 Frontend Architecture**
Use direct file reads for known patterns:
```
nia___read_source_content({
  source_type: "repository",
  source_identifier: "Fluxitude/midday:apps/dashboard/src/trpc/server.tsx"
})

nia___read_source_content({
  source_type: "repository", 
  source_identifier: "Fluxitude/midday:apps/dashboard/src/trpc/client.tsx"
})
```

Then ask focused questions:
- "Show Midday's HydrateClient implementation"
- "Show example Server Component using tRPC prefetch"
- "Show example Client Component with useSuspenseQuery"

Compare with: apps/admin/ structure

**1.2 API Architecture**
Read key files:
```
nia___read_source_content({
  source_type: "repository",
  source_identifier: "Fluxitude/midday:apps/api/src/trpc/init.ts"
})
```

Then focused queries:
- "Show Midday's Hono tRPC setup"
- "Show authentication middleware pattern"
- "Show example tRPC router with team context"

Compare with: apps/api/ structure

**1.3 Database Architecture**
Use Supabase tools + targeted Nia queries:
```
supabase___list_tables
```

Then:
- "Show Midday's database schema file"
- "How does Midday implement multi-tenancy with team_id"
- "Show Midday's RLS policy examples"

**1.4 Package Organization**
Use repository hierarchy + focused queries:
```
nia___get_repository_hierarchy({
  repository: "Fluxitude/midday",
  include_classes: false,
  include_methods: false
})
```

Then:
- "List Midday's packages and their purposes"
- "How is packages/db organized"
- "Show example of domain package structure"

### Part 2: Gap Analysis

**2.1 Critical Gaps**
- What are we missing completely?
- What's implemented incorrectly?
- What's half-done?

**2.2 Structural Issues**
- Is our apps/ structure correct?
- Should telegram-bot exist?
- Do we need more packages?
- Are domain/services packages justified?

**2.3 Schema Issues**
- Table structure problems
- Missing relationships
- RLS gaps
- Index optimization needed

### Part 3: Redesign Proposal

**3.1 Target Architecture**
Design our ideal architecture borrowing from Midday but adapted for:
- Tailoring business (orders, measurements, invoices)
- Unified communications (WhatsApp, Instagram, Telegram, SMS)
- Multi-tenant with team isolation

**3.2 Database Redesign**
- New schema (if needed)
- Migration strategy
- RLS policies
- Performance optimizations

**3.3 Repository Restructure**
- Apps organization
- Package split/merge decisions
- New packages needed
- Consolidation strategy

### Part 4: Migration Roadmap

**Phase 0: Foundation** (Critical Infrastructure)
- Tasks: [what needs to be in place first]
- Risk: [what could go wrong]
- Validation: [how to verify]

**Phase 1-5+:** [Complete migration path]

### Part 5: Decision Framework

**Follow Midday When:**
- [specific patterns to adopt exactly]

**Adapt Midday When:**
- [patterns that need customization]

**Build Custom When:**
- [unique requirements not in Midday]

**Avoid/Delay:**
- [things that are premature or unnecessary]

## MCP Tool Strategy

**Primary Analysis: Nia**
- Deep pattern understanding
- Architecture explanations
- Code synthesis across files

**Quick Lookups: Ref**
- API documentation
- Specific file finding
- Official docs reference

**Validation: Supabase Tools**
- supabase___list_tables (schema inspection)
- supabase___list_migrations (history)
- supabase___list_extensions (features available)

## Deliverable

**Output File:** docs/system-overhaul-blueprint-kilo.md

**Must Include:**
1. Executive Summary (current state → target state)
2. Complete Architecture Comparison (every layer)
3. Database Redesign Proposal (with migration path)
4. Repository Restructure Plan (apps + packages)
5. 5-Phase Implementation Roadmap (with dependencies)
6. Risk Analysis & Mitigation (per phase)
7. Decision Framework (when to follow vs adapt)
8. Testing Strategy (validation approach)
9. Success Metrics (how to measure progress)
10. Quick Start Guide (where to begin)

**Format:** Comprehensive markdown document, ~5000-8000 words

---

## Architect Framework Template

Respond with:

**Summary:** <1-2 sentence high-level overview>

**Current State:**
- Architecture: <layers, modules, current patterns>
- Database: <tables, schemas, migrations>
- Tech Stack: <frameworks, libraries, integrations>
- Key Files: <critical paths and their purpose>

**Proposed Architecture:**
- Design: <target architecture and rationale>
- Database Changes: <new tables, columns, relationships>
- API Changes: <new endpoints, edge functions, integrations>
- Trade-offs: <why this approach over alternatives>

**Implementation Plan:**
1. <Phase 1 name>: <specific tasks>
   - Success criteria: <measurable outcomes>
   - Dependencies: <prerequisites, blockers>
   - Estimated complexity: <low/medium/high>

2. <Phase 2 name>: <specific tasks>
   - Success criteria: <measurable outcomes>
   - Dependencies: <prerequisites, blockers>
   - Estimated complexity: <low/medium/high>

**Risks & Mitigations:**
- <Risk 1>: <concrete mitigation strategy>
- <Risk 2>: <concrete mitigation strategy>

**Testing Strategy:**
- <unit tests, integration tests, manual verification steps>

**Recommendations:** <immediate next steps, ordered by priority>
